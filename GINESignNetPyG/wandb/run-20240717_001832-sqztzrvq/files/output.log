BN? True
BN? True
BN? True
BN? True
BN? True
BN? True
BN? True
BN? True
BN? True
BN? True
BN? True
BN? True
batchnorm BN
hidden 6
BN? True
> /lfs/hyperturing1/0/echoi1/Random-SignNet/GINESignNetPyG/core/model_utils/pyg_gnn_wrapper.py(154)forward()
-> laplacian_batch = reconstruct_laplacian_from_flat(laplacian, num_nodes_per_graph)
/lfs/hyperturing1/0/echoi1/Random-SignNet/GINESignNetPyG/core/model.py:102: UserWarning: The use of `x.T` on tensors of dimension other than 2 to reverse their shape is deprecated and it will throw an error in a future release. Consider `x.mT` to transpose batches of matrices or `x.permute(*torch.arange(x.ndim - 1, -1, -1))` to reverse the dimensions of a tensor. (Triggered internally at ../aten/src/ATen/native/TensorShape.cpp:3675.)
  rand_out = F.linear(x_r.T.reshape(N*M, -1), self.weight[:, -1:], self.bias) #N*MxF
149  	        num_nodes_per_graph = scatter_add(batch.new_ones(x.size(0)), batch, dim=0, dim_size=batch_size).tolist()
150  	        max_num_nodes = max(num_nodes_per_graph)
151  	
152  	        import pdb; pdb.set_trace()
153  	        # Reconstruct the Laplacian matrix from the flattened form
154  ->	        laplacian_batch = reconstruct_laplacian_from_flat(laplacian, num_nodes_per_graph)
155  	
156  	        # Reshape x to (batch_size, num_nodes, num_features)
157  	        num_features = x.size(1)
158  	        num_samples = x.size(2)
159  	        x_padded = torch.zeros((batch_size, max_num_nodes, num_features, num_samples), device=x.device)
> /lfs/hyperturing1/0/echoi1/Random-SignNet/GINESignNetPyG/core/model_utils/pyg_gnn_wrapper.py(157)forward()
-> num_features = x.size(1)
<built-in method size of Tensor object at 0x7f8fd6622e70>
torch.Size([100, 36, 36])
> /lfs/hyperturing1/0/echoi1/Random-SignNet/GINESignNetPyG/core/model_utils/pyg_gnn_wrapper.py(158)forward()
-> num_samples = x.size(2)
> /lfs/hyperturing1/0/echoi1/Random-SignNet/GINESignNetPyG/core/model_utils/pyg_gnn_wrapper.py(159)forward()
-> x_padded = torch.zeros((batch_size, max_num_nodes, num_features, num_samples), device=x.device)
> /lfs/hyperturing1/0/echoi1/Random-SignNet/GINESignNetPyG/core/model_utils/pyg_gnn_wrapper.py(160)forward()
-> offset = 0
> /lfs/hyperturing1/0/echoi1/Random-SignNet/GINESignNetPyG/core/model_utils/pyg_gnn_wrapper.py(161)forward()
-> for i, num_nodes in enumerate(num_nodes_per_graph):
> /lfs/hyperturing1/0/echoi1/Random-SignNet/GINESignNetPyG/core/model_utils/pyg_gnn_wrapper.py(162)forward()
-> x_padded[i, :num_nodes] = x[offset:offset + num_nodes]
> /lfs/hyperturing1/0/echoi1/Random-SignNet/GINESignNetPyG/core/model_utils/pyg_gnn_wrapper.py(163)forward()
-> offset += num_nodes
> /lfs/hyperturing1/0/echoi1/Random-SignNet/GINESignNetPyG/core/model_utils/pyg_gnn_wrapper.py(161)forward()
-> for i, num_nodes in enumerate(num_nodes_per_graph):
> /lfs/hyperturing1/0/echoi1/Random-SignNet/GINESignNetPyG/core/model_utils/pyg_gnn_wrapper.py(162)forward()
-> x_padded[i, :num_nodes] = x[offset:offset + num_nodes]
> /lfs/hyperturing1/0/echoi1/Random-SignNet/GINESignNetPyG/core/model_utils/pyg_gnn_wrapper.py(163)forward()
-> offset += num_nodes
> /lfs/hyperturing1/0/echoi1/Random-SignNet/GINESignNetPyG/core/model_utils/pyg_gnn_wrapper.py(161)forward()
-> for i, num_nodes in enumerate(num_nodes_per_graph):
> /lfs/hyperturing1/0/echoi1/Random-SignNet/GINESignNetPyG/core/model_utils/pyg_gnn_wrapper.py(162)forward()
-> x_padded[i, :num_nodes] = x[offset:offset + num_nodes]
[24, 22, 22, 24, 26, 21, 27, 21, 26, 15, 30, 25, 17, 28, 20, 24, 20, 25, 29, 24, 18, 24, 36, 22, 26, 31, 22, 27, 23, 20, 21, 25, 24, 24, 29, 21, 24, 22, 26, 21, 19, 31, 17, 26, 19, 18, 18, 20, 18, 11, 27, 24, 23, 17, 23, 27, 20, 25, 25, 27, 26, 24, 25, 26, 27, 18, 27, 21, 20, 25, 27, 29, 21, 23, 20, 33, 32, 24, 25, 24, 28, 25, 29, 25, 23, 21, 30, 21, 25, 24, 22, 22, 26, 29, 26, 19, 33, 17, 26, 19]
> /lfs/hyperturing1/0/echoi1/Random-SignNet/GINESignNetPyG/core/model_utils/pyg_gnn_wrapper.py(163)forward()
-> offset += num_nodes
> /lfs/hyperturing1/0/echoi1/Random-SignNet/GINESignNetPyG/core/model_utils/pyg_gnn_wrapper.py(161)forward()
-> for i, num_nodes in enumerate(num_nodes_per_graph):
> /lfs/hyperturing1/0/echoi1/Random-SignNet/GINESignNetPyG/core/model_utils/pyg_gnn_wrapper.py(162)forward()
-> x_padded[i, :num_nodes] = x[offset:offset + num_nodes]
> /lfs/hyperturing1/0/echoi1/Random-SignNet/GINESignNetPyG/core/model_utils/pyg_gnn_wrapper.py(163)forward()
-> offset += num_nodes
> /lfs/hyperturing1/0/echoi1/Random-SignNet/GINESignNetPyG/core/model_utils/pyg_gnn_wrapper.py(161)forward()
-> for i, num_nodes in enumerate(num_nodes_per_graph):
> /lfs/hyperturing1/0/echoi1/Random-SignNet/GINESignNetPyG/core/model_utils/pyg_gnn_wrapper.py(162)forward()
-> x_padded[i, :num_nodes] = x[offset:offset + num_nodes]
> /lfs/hyperturing1/0/echoi1/Random-SignNet/GINESignNetPyG/core/model_utils/pyg_gnn_wrapper.py(163)forward()
-> offset += num_nodes
> /lfs/hyperturing1/0/echoi1/Random-SignNet/GINESignNetPyG/core/model_utils/pyg_gnn_wrapper.py(161)forward()
-> for i, num_nodes in enumerate(num_nodes_per_graph):
Traceback (most recent call last):
  File "<frozen runpy>", line 198, in _run_module_as_main
  File "<frozen runpy>", line 88, in _run_code
  File "/lfs/hyperturing1/0/echoi1/Random-SignNet/GINESignNetPyG/train/zinc.py", line 260, in <module>
    run(config_path, cfg, create_dataset, create_model, train, test)
  File "/lfs/hyperturing1/0/echoi1/Random-SignNet/GINESignNetPyG/core/train.py", line 47, in run
    train_loss = train(train_loader, model, optimizer, device=cfg.device, num_samples=cfg.train.num_samples)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lfs/hyperturing1/0/echoi1/Random-SignNet/GINESignNetPyG/train/zinc.py", line 77, in train
    loss = (model(data, rand_x).squeeze() - y).abs().mean()
            ^^^^^^^^^^^^^^^^^^^
  File "/lfs/hyperturing1/0/echoi1/env/micromamba/envs/graphenv/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lfs/hyperturing1/0/echoi1/env/micromamba/envs/graphenv/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lfs/hyperturing1/0/echoi1/Random-SignNet/GINESignNetPyG/core/sign_net.py", line 149, in forward
    return self.gnn(data, x_rand)
           ^^^^^^^^^^^^^^^^^^^^^^
  File "/lfs/hyperturing1/0/echoi1/env/micromamba/envs/graphenv/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lfs/hyperturing1/0/echoi1/env/micromamba/envs/graphenv/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lfs/hyperturing1/0/echoi1/Random-SignNet/GINESignNetPyG/core/model.py", line 182, in forward
    x = layer(x, data.edge_index, edge_attr, data.laplacian, data.batch)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lfs/hyperturing1/0/echoi1/env/micromamba/envs/graphenv/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lfs/hyperturing1/0/echoi1/env/micromamba/envs/graphenv/lib/python3.11/site-packages/torch/nn/modules/module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lfs/hyperturing1/0/echoi1/Random-SignNet/GINESignNetPyG/core/model_utils/pyg_gnn_wrapper.py", line 161, in forward
    for i, num_nodes in enumerate(num_nodes_per_graph):
  File "/lfs/hyperturing1/0/echoi1/env/micromamba/envs/graphenv/lib/python3.11/bdb.py", line 90, in trace_dispatch
    return self.dispatch_line(frame)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/lfs/hyperturing1/0/echoi1/env/micromamba/envs/graphenv/lib/python3.11/bdb.py", line 115, in dispatch_line
    if self.quitting: raise BdbQuit
                      ^^^^^^^^^^^^^
bdb.BdbQuit